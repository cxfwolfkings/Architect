package com.colin.common;

/**
 * 泛型（Generic type或者generics）是对Java语言的类型系统的一种扩展，以支持创建可以按类型进行参数化的类。可以把类型参数看作是使用参数化类型时指定的类型的一个占位符，就像方法的形式参数是运行时传递的值的占位符一样。
 * 泛型的好处
 * 1）类型安全：编译时验证
 * 2）消除强制类型转换
 * 3）潜在的性能收益：泛型为较大的优化带来可能。在泛型的初始实现中，编译器将强制类型转换（没有泛型的话，程序员会指定这些强制类型转换）插入生成的字节码中。但是更多类型信息可用于编译器这一事实，为未来版本的JVM的优化带来可能。
 * 数组是协变的，但是泛型不是协变的，List<Object>不是List<String>的父类型。List<?>是任何泛型List的父类型
 * 声明泛型方法，一般是因为您想要在该方法的多个参数之间宣称一个类型约束。
 * 为什么您选择使用泛型方法，而不是将类型T添加到类定义呢？（至少）有两种情况应该这样做：
 * 1、当泛型方法是静态的时，这种情况下不能使用类类型参数。
 * 2、当T上的类型约束对于方法真正是局部的时，这意味着没有在相同类的另一个方法签名中使用相同类型T的约束。通过使得泛型方法的类型参数对于方法是局部的，可以简化封闭类型的签名。
 * 类型限制示例：
 * public class Matrix<V extends Number> { ... }
 * 
 * @author  Colin Chen
 * @create  2018年11月18日 下午8:54:32
 * @modify  2018年11月18日 下午8:54:32
 * @version A.1
 */
public class GenericHelper {

}
